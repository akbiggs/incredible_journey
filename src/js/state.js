// Generated by CoffeeScript 1.7.1
(function() {
  var State;

  window.State = State = (function() {
    State.instance = null;

    State.prototype.screenSize = Vector.Zero(2);

    State.prototype.players = [];

    State.prototype.enemies = [];

    State.prototype.particles = [];

    State.prototype.bullets = [];


    /* GETTERS */

    State.prototype.getScreenCenter = function() {
      return this.screenSize.multiply(0.5);
    };

    State.prototype.getAllGameObjects = function() {
      return _.chain([]).union(this.enemies).union(this.particles).union(this.players).union(this.bullets).value();
    };


    /* MAIN FUNCTIONS */

    function State(screenSize) {
      State.instance = this;
      this.screenSize = screenSize;
      this.enemies = this.initializeEnemies(this.getScreenCenter());
      this.particles = this.testParticles(this.getScreenCenter());
      this.players = [new Player(Vector.Zero(2))];
    }

    State.prototype.update = function() {
      var obj, _i, _len, _ref, _results;
      _ref = this.getAllGameObjects();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        obj = _ref[_i];
        _results.push(typeof obj.update === "function" ? obj.update() : void 0);
      }
      return _results;
    };

    State.prototype.draw = function(ctx) {
      var obj, _i, _len, _ref, _results;
      _ref = this.getAllGameObjects();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        obj = _ref[_i];
        ctx.save();
        if (typeof obj.draw === "function") {
          obj.draw(ctx);
        }
        _results.push(ctx.restore());
      }
      return _results;
    };


    /* UTILITIES */

    State.prototype.initializeEnemies = function(center) {
      return _([1, 2, 3, 4, 5]).map(function(i) {
        var offset;
        offset = Vector.Random(2).subtract([0.5, 0.5]);
        return new NormalEnemy(center.add(offset.multiply(100)));
      });
    };

    State.prototype.testParticles = function(center) {
      var _i, _results;
      return _((function() {
        _results = [];
        for (_i = 1; _i <= 100; _i++){ _results.push(_i); }
        return _results;
      }).apply(this)).map(function(i) {
        var offset;
        offset = $V([(Math.random() * 2) - 1, (Math.random() * 2) - 1]);
        return new Particle(center.add(offset.multiply(50)), $V([10, 10]), $V([Math.random(), Math.random()]).multiply(2), 'rgb(200, 0, 0)');
      });
    };

    State.prototype.testDialogues = function(ctx) {
      return [new Dialogue("I am a dumbface", ctx)];
    };

    return State;

  })();

}).call(this);
