// Generated by CoffeeScript 1.7.1
(function() {
  var State;

  window.State = State = (function() {
    State.instance = null;

    State.prototype.screenSize = Vector.Zero(2);

    State.prototype.players = [];

    State.prototype.enemies = [];

    State.prototype.particles = [];

    State.prototype.bullets = [];

    State.prototype._gameObjectLists = ["players", "enemies", "particles", "bullets"];

    State.prototype._deferredRemoveList = [];

    State.prototype._flash = false;


    /* GETTERS */

    State.prototype.getScreenCenter = function() {
      return this.screenSize.multiply(0.5);
    };

    State.prototype.getAllGameObjects = function() {
      return _(this._gameObjectLists).reduce(((function(_this) {
        return function(memo, listName) {
          return memo.concat(_this[listName]);
        };
      })(this)), []);
    };


    /* MAIN FUNCTIONS */

    function State(screenSize) {
      State.instance = this;
      this.screenSize = screenSize;
      this.players = [new Player(Vector.Zero(2))];
      setInterval((function(_this) {
        return function() {
          return _this.enemies.push(new NormalEnemy($V([_this.screenSize.e(1) + 50, Math.random() * _this.screenSize.e(2)])));
        };
      })(this), 300);
    }

    State.prototype.update = function() {
      var obj, _i, _len, _ref;
      _ref = this.getAllGameObjects();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        obj = _ref[_i];
        if (typeof obj.update === "function") {
          obj.update(this);
        }
      }
      return this._applyDeferredRemoveList();
    };

    State.prototype.draw = function(ctx) {
      var obj, _i, _len, _ref;
      _ref = this.getAllGameObjects();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        obj = _ref[_i];
        ctx.save();
        if (typeof obj.draw === "function") {
          obj.draw(ctx);
        }
        ctx.restore();
      }
      if (this._flash) {
        return this._flash = false;
      }
    };


    /* UTILITIES */

    State.prototype.flash = function() {
      return this._flash = true;
    };

    State.prototype.removeLater = function(listName, element) {
      return this._deferredRemoveList.push({
        list: listName,
        element: element
      });
    };

    State.prototype._applyDeferredRemoveList = function() {
      var pair, _i, _len, _ref;
      _ref = this._deferredRemoveList;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pair = _ref[_i];
        this[pair.list] = _(this[pair.list]).without(pair.element);
      }
      return this._deferredRemoveList = [];
    };

    State.prototype._initializeEnemies = function(center) {
      return _([1, 2, 3, 4, 5]).map(function(i) {
        var offset;
        offset = Vector.Random(2).subtract([0.5, 0.5]);
        return new NormalEnemy(center.add(offset.multiply(100)));
      });
    };

    State.prototype._testParticles = function(center) {
      var _i, _results;
      return _((function() {
        _results = [];
        for (_i = 1; _i <= 100; _i++){ _results.push(_i); }
        return _results;
      }).apply(this)).map(function(i) {
        var offset;
        offset = $V([(Math.random() * 2) - 1, (Math.random() * 2) - 1]);
        return new Particle(center.add(offset.multiply(50)), $V([10, 10]), $V([Math.random(), Math.random()]).multiply(2), 'rgb(200, 0, 0)');
      });
    };

    State.prototype._testDialogues = function(ctx) {
      return [new Dialogue("I am a dumbface", ctx)];
    };

    return State;

  })();

}).call(this);
