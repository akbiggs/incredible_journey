// Generated by CoffeeScript 1.7.1
(function() {
  var Mouse, Point, Wave;

  window.Point = Point = (function() {
    function Point(x, y) {
      this.x = x;
      this.y = y;
    }

    Point.prototype.add = function(p) {
      return new Point(this.x + p.x, this.y + p.y);
    };

    Point.prototype.sub = function(p) {
      return new Point(this.x - p.x, this.y - p.y);
    };

    Point.prototype.mul = function(p) {
      if (typeof p === 'number') {
        return new Point(this.x * p, this.y * p);
      } else {
        return new Point(this.x * p.x, this.y * p.y);
      }
    };

    Point.prototype.div = function(p) {
      if (typeof p === 'number') {
        return new Point(this.x / p, this.y / p);
      } else {
        return new Point(this.x / p.x, this.y / p.y);
      }
    };

    return Point;

  })();

  window.Wave = Wave = (function() {
    function Wave(speed) {
      this.speed = speed;
      this.angle = 0;
    }

    Wave.prototype.update = function() {
      return this.angle += this.speed;
    };

    Wave.prototype.value = function() {
      return Math.sin(this.angle);
    };

    return Wave;

  })();

  window.Mouse = Mouse = (function() {
    function Mouse() {}

    Mouse.isDown = false;

    Mouse.position = Vector.Zero(2);

    Mouse._canvas = null;

    window.addLoadEvent(function() {
      Mouse._canvas = $("#game")[0];
      Mouse._canvas.addEventListener('mousemove', function(evt) {
        var rect;
        rect = Mouse._canvas.getBoundingClientRect();
        return Mouse.position = $V([evt.clientX - rect.left, evt.clientY - rect.top]);
      }, false);
      Mouse._canvas.addEventListener('mousedown', function(evt) {
        return Mouse.isDown = true;
      }, false);
      return Mouse._canvas.addEventListener('mouseup', function(evt) {
        return Mouse.isDown = false;
      }, false);
    });

    return Mouse;

  })();

}).call(this);
