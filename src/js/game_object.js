// Generated by CoffeeScript 1.7.1
(function() {
  var GameObject;

  window.GameObject = GameObject = (function() {
    GameObject.showHitboxes = false;

    GameObject.prototype.position = null;

    GameObject.prototype.size = null;

    GameObject.prototype.velocity = $V([0, 0]);

    GameObject.prototype.rotation = 0;

    GameObject.prototype.scale = 1;

    GameObject.prototype.image = null;

    GameObject.prototype.wave = new Wave(0);


    /* GETTERS */

    GameObject.prototype.getCenter = function() {
      return this.position.add(this.getHalfSize());
    };

    GameObject.prototype.getHalfSize = function() {
      return this.size.x(0.5);
    };

    GameObject.prototype.getRadius = function() {
      return this.size.e(1) / 2;
    };


    /* MAIN FUNCTIONS */

    function GameObject(position, size, velocity, params) {
      var param, value, _i, _len;
      this.position = position;
      this.size = size;
      this.velocity = velocity != null ? velocity : Vector.Zero(2);
      if (params == null) {
        params = {};
      }
      for (value = _i = 0, _len = params.length; _i < _len; value = ++_i) {
        param = params[value];
        this[param] = value;
      }
      this.image = Img.frankie;
    }

    GameObject.prototype.update = function(state) {
      this.wave.update();
      return this.position = this.position.add(this.velocity);
    };

    GameObject.prototype.draw = function(ctx) {
      var scale;
      ctx.translate(this.position.e(1), this.position.e(2));
      if (GameObject.showHitboxes) {
        ctx.fillStyle = 'rgb(200,0,0)';
        ctx.beginPath();
        ctx.arc(0, 0, this.size.e(1) / 2, 0, Math.PI * 2, true);
        ctx.closePath();
        ctx.fill();
      }
      ctx.rotate(this.rotation + this.wave.value() * 0.2);
      scale = this.scale + this.wave.value() * 0.1;
      ctx.scale(scale, scale);
      if (this.image != null) {
        return ctx.drawImage(this.image, -this.size.e(1) / 2, -this.size.e(2) / 2, this.size.e(1), this.size.e(2));
      }
    };


    /* UTILITIES */

    GameObject.prototype.isRadialCollidingWith = function(other) {
      return this.position.distanceFrom(other.position) < this.getRadius() + other.getRadius();
    };

    GameObject.prototype.withinScreen = function() {
      return this.position.e(1) > 0 && this.position.e(1) < State.instance.screenSize.e(1) && this.position.e(2) > 0 && this.position.e(2) < State.instance.screenSize.e(2);
    };

    return GameObject;

  })();

}).call(this);
